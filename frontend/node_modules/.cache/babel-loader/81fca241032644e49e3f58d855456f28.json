{"ast":null,"code":"var _jsxFileName = \"/home/djole/Documents/fullstack/sluzba/frontend/src/components/Select/Select.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { GetData, GetDataById } from \"../../helpers/GetStates\";\nimport \"./Select.style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SelectInput = () => {\n  _s();\n\n  useEffect(() => {\n    setDisplayOptions(options.filter(option => {\n      if (option.name) {\n        return option.name.toLocaleLowerCase().search(search.toLocaleLowerCase()) !== -1;\n      }\n\n      return options;\n    }));\n  }, [search, options]);\n  return /*#__PURE__*/_jsxDEV(\"input\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 10\n  }, this);\n};\n\n_s(SelectInput, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = SelectInput;\n\nconst Select = ({\n  id,\n  field,\n  value,\n  setData\n}) => {\n  _s2();\n\n  const options = GetData(field.options);\n  const [isOpen, setIsOpen] = useState(false);\n  const [displayOptions, setDisplayOptions] = useState(options);\n  const selected = GetDataById(field.options, value);\n  console.log(selected);\n  const [search, setSearch] = useState(value ? selected.name : \"\");\n  useEffect(() => {\n    //     if (value) {\n    //       setSearch(options.find((option) => option.id === value).name);\n    //     } else {\n    //       setSearch(\"\");\n    //     }\n    setDisplayOptions(options.filter(option => {\n      if (option.name) {\n        return option.name.toLocaleLowerCase().search(search.toLocaleLowerCase()) !== -1;\n      }\n\n      return options;\n    }));\n  }, [search, options]);\n\n  const handleSelect = (e, option) => {\n    e.preventDefault();\n    setSearch(option.name);\n    setData(oldData => ({ ...oldData,\n      [field.key]: option.id\n    }));\n    setIsOpen(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"select\",\n    id: id,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      onClick: () => setIsOpen(oldOpen => !oldOpen) // onFocus={() => setIsOpen(true)}\n      // onBlur={() => setIsOpen(false)}\n      ,\n      onChange: e => setSearch(e.target.value),\n      value: search\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: displayOptions.map(option => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: e => handleSelect(e, option),\n          children: option.name\n        }, option.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Select, \"WTt+0C0aNR2zrlV8jUUHtF1jt38=\");\n\n_c2 = Select;\nexport default Select;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SelectInput\");\n$RefreshReg$(_c2, \"Select\");","map":{"version":3,"sources":["/home/djole/Documents/fullstack/sluzba/frontend/src/components/Select/Select.js"],"names":["useEffect","useState","GetData","GetDataById","SelectInput","setDisplayOptions","options","filter","option","name","toLocaleLowerCase","search","Select","id","field","value","setData","isOpen","setIsOpen","displayOptions","selected","console","log","setSearch","handleSelect","e","preventDefault","oldData","key","oldOpen","target","map"],"mappings":";;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,yBAArC;AAEA,OAAO,oBAAP;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxBJ,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,iBAAiB,CACfC,OAAO,CAACC,MAAR,CAAgBC,MAAD,IAAY;AACzB,UAAIA,MAAM,CAACC,IAAX,EAAiB;AACf,eACED,MAAM,CAACC,IAAP,CACGC,iBADH,GAEGC,MAFH,CAEUA,MAAM,CAACD,iBAAP,EAFV,MAE0C,CAAC,CAH7C;AAKD;;AACD,aAAOJ,OAAP;AACD,KATD,CADe,CAAjB;AAYD,GAbQ,EAaN,CAACK,MAAD,EAASL,OAAT,CAbM,CAAT;AAcA,sBAAO;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAhBD;;GAAMF,W;;KAAAA,W;;AAkBN,MAAMQ,MAAM,GAAG,CAAC;AAAEC,EAAAA,EAAF;AAAMC,EAAAA,KAAN;AAAaC,EAAAA,KAAb;AAAoBC,EAAAA;AAApB,CAAD,KAAmC;AAAA;;AAChD,QAAMV,OAAO,GAAGJ,OAAO,CAACY,KAAK,CAACR,OAAP,CAAvB;AACA,QAAM,CAACW,MAAD,EAASC,SAAT,IAAsBjB,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACkB,cAAD,EAAiBd,iBAAjB,IAAsCJ,QAAQ,CAACK,OAAD,CAApD;AACA,QAAMc,QAAQ,GAAGjB,WAAW,CAACW,KAAK,CAACR,OAAP,EAAgBS,KAAhB,CAA5B;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,QAAM,CAACT,MAAD,EAASY,SAAT,IAAsBtB,QAAQ,CAACc,KAAK,GAAGK,QAAQ,CAACX,IAAZ,GAAmB,EAAzB,CAApC;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA;AACA;AACA;AACAK,IAAAA,iBAAiB,CACfC,OAAO,CAACC,MAAR,CAAgBC,MAAD,IAAY;AACzB,UAAIA,MAAM,CAACC,IAAX,EAAiB;AACf,eACED,MAAM,CAACC,IAAP,CACGC,iBADH,GAEGC,MAFH,CAEUA,MAAM,CAACD,iBAAP,EAFV,MAE0C,CAAC,CAH7C;AAKD;;AACD,aAAOJ,OAAP;AACD,KATD,CADe,CAAjB;AAYD,GAlBQ,EAkBN,CAACK,MAAD,EAASL,OAAT,CAlBM,CAAT;;AAoBA,QAAMkB,YAAY,GAAG,CAACC,CAAD,EAAIjB,MAAJ,KAAe;AAClCiB,IAAAA,CAAC,CAACC,cAAF;AACAH,IAAAA,SAAS,CAACf,MAAM,CAACC,IAAR,CAAT;AACAO,IAAAA,OAAO,CAAEW,OAAD,KAAc,EAAE,GAAGA,OAAL;AAAc,OAACb,KAAK,CAACc,GAAP,GAAapB,MAAM,CAACK;AAAlC,KAAd,CAAD,CAAP;AACAK,IAAAA,SAAS,CAAC,KAAD,CAAT;AACD,GALD;;AAOA,sBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAwB,IAAA,EAAE,EAAEL,EAA5B;AAAA,4BACE;AACE,MAAA,OAAO,EAAE,MAAMK,SAAS,CAAEW,OAAD,IAAa,CAACA,OAAf,CAD1B,CAEE;AACA;AAHF;AAIE,MAAA,QAAQ,EAAGJ,CAAD,IAAOF,SAAS,CAACE,CAAC,CAACK,MAAF,CAASf,KAAV,CAJ5B;AAKE,MAAA,KAAK,EAAEJ;AALT;AAAA;AAAA;AAAA;AAAA,YADF,EAQGM,MAAM,iBACL;AAAA,gBACGE,cAAc,CAACY,GAAf,CAAoBvB,MAAD,IAAY;AAC9B,4BACE;AAAqB,UAAA,OAAO,EAAGiB,CAAD,IAAOD,YAAY,CAACC,CAAD,EAAIjB,MAAJ,CAAjD;AAAA,oBACGA,MAAM,CAACC;AADV,WAAUD,MAAM,CAACK,EAAjB;AAAA;AAAA;AAAA;AAAA,gBADF;AAKD,OANA;AADH;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CAzDD;;IAAMD,M;;MAAAA,M;AA2DN,eAAeA,MAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { GetData, GetDataById } from \"../../helpers/GetStates\";\n\nimport \"./Select.style.css\";\n\nconst SelectInput = () => {\n  useEffect(() => {\n    setDisplayOptions(\n      options.filter((option) => {\n        if (option.name) {\n          return (\n            option.name\n              .toLocaleLowerCase()\n              .search(search.toLocaleLowerCase()) !== -1\n          );\n        }\n        return options;\n      })\n    );\n  }, [search, options]);\n  return <input></input>;\n};\n\nconst Select = ({ id, field, value, setData }) => {\n  const options = GetData(field.options);\n  const [isOpen, setIsOpen] = useState(false);\n  const [displayOptions, setDisplayOptions] = useState(options);\n  const selected = GetDataById(field.options, value);\n  console.log(selected);\n  const [search, setSearch] = useState(value ? selected.name : \"\");\n\n  useEffect(() => {\n    //     if (value) {\n    //       setSearch(options.find((option) => option.id === value).name);\n    //     } else {\n    //       setSearch(\"\");\n    //     }\n    setDisplayOptions(\n      options.filter((option) => {\n        if (option.name) {\n          return (\n            option.name\n              .toLocaleLowerCase()\n              .search(search.toLocaleLowerCase()) !== -1\n          );\n        }\n        return options;\n      })\n    );\n  }, [search, options]);\n\n  const handleSelect = (e, option) => {\n    e.preventDefault();\n    setSearch(option.name);\n    setData((oldData) => ({ ...oldData, [field.key]: option.id }));\n    setIsOpen(false);\n  };\n\n  return (\n    <div className=\"select\" id={id}>\n      <input\n        onClick={() => setIsOpen((oldOpen) => !oldOpen)}\n        // onFocus={() => setIsOpen(true)}\n        // onBlur={() => setIsOpen(false)}\n        onChange={(e) => setSearch(e.target.value)}\n        value={search}\n      ></input>\n      {isOpen && (\n        <div>\n          {displayOptions.map((option) => {\n            return (\n              <div key={option.id} onClick={(e) => handleSelect(e, option)}>\n                {option.name}\n              </div>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Select;\n"]},"metadata":{},"sourceType":"module"}