{"ast":null,"code":"var _jsxFileName = \"/home/djole/Documents/fullstack/sluzba/frontend/src/components/Table/SubTable.js\",\n    _s = $RefreshSig$();\n\nimport { GetDataById } from \"../../helpers/GetStates\";\nimport FindParent from \"../../helpers/FindParent\";\nimport Form from \"../Form/Form\";\nimport { GetDefaultData } from \"../../helpers/GetDefaultData\";\nimport { useEffect, useState } from \"react\"; // export const SubTableLogic = ({ page, id }) => {\n//   const [pages, setPages] = useState([{ page: page, id: id }]);\n//   return <SubTable pages={pages} setPages={setPages} />;\n// };\n// const SubPageLogic = (page, id, data, pages, setPages) => {\n//   // const data = GetDataById(page.key, id);\n//   return SubFieldsLogic(data, page, pages, setPages);\n// };\n// const SubFieldsLogic = (data, page, pages, setPages) => {\n//   // console.log(pages);\n//   page.fields.forEach((field) => {\n//     if (field.options) {\n//       const parent = FindParent(field);\n//       const parentMore = { page: parent, id: data[field.key] };\n//       // console.log(data[field.key]);\n//       // console.log(id);\n//       // pages.push(parentMore);\n//       if (!pages.find((p) => p.page.key === parent.key)) {\n//         setPages((oldPages) => [...oldPages, parentMore]);\n//       }\n//       //  else {\n//       // if(data[field.key])\n//       // setPages(oldPages => [...oldPages])\n//       // }\n//       // if (data[field.key] !== 0) {\n//       // SubPageLogic(parent, data[field.key], pages, setPages);\n//       // }\n//     }\n//   });\n// };\n// const SubTable = ({ pages, setPages }) => {\n//   // console.log(pages);\n//   return pages.map((page) => {\n//     return (\n//       <SubPage\n//         key={page.page.key}\n//         id={page.id}\n//         page={page.page}\n//         pages={pages}\n//         setPages={setPages}\n//       />\n//     );\n//   });\n// };\n// const SubPage = ({ page, id, pages, setPages }) => {\n//   const data = GetDataById(page.key, id);\n//   const defaultData = GetDefaultData(page);\n//   const [fullData, setFullData] = useState(data ? data : defaultData);\n//   // useEffect(() => {\n//   //   if (data) {\n//   //     setFullData(data);\n//   //   } else {\n//   //     setFullData(defaultData);\n//   //   }\n//   // }, [data]);\n//   // console.log(data);data ? data : defaultData,\n//   // console.log(defaultData);\n//   // const [data, setData] =\n//   SubPageLogic(page, id, fullData, pages, setPages);\n//   return (\n//     // {/* <div className=\"head\">{page.name}</div> */}\n//     <Form active={id} defaultData={data ? data : defaultData} page={page} />\n//     // {/* <SubFields data={data} page={page} /> */}\n//   );\n// };\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SubTableLogic = ({\n  page,\n  id\n}) => {\n  _s();\n\n  const [pages, setPages] = useState([{\n    page: page,\n    id: id\n  }]); // console.log(\"rendering logic\");\n\n  return /*#__PURE__*/_jsxDEV(SubTable, {\n    pages: pages,\n    setPages: setPages\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 10\n  }, this);\n};\n\n_s(SubTableLogic, \"uhKOBOABF25lySCX2thHyF7mkKk=\");\n\n_c = SubTableLogic;\nexport const SubTable = ({\n  pages,\n  setPages\n}) => {\n  return pages.map(page => {\n    return /*#__PURE__*/_jsxDEV(SubPage, {\n      page: page.page,\n      id: page.id,\n      pages: pages,\n      setPages: setPages\n    }, page.page.key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this);\n  });\n};\n_c2 = SubTable;\nexport const GetAllPages = (page, data, pages, setPages) => {\n  page.fields.forEach(field => {\n    if (field.options) {\n      const parent = FindParent(field);\n      console.log(parent.key);\n\n      if (!pages.find(page => page.page.key === parent.key)) {\n        const parentMore = {\n          page: parent,\n          id: data[field.key]\n        };\n        setPages(oldPages => [...oldPages, parentMore]);\n      }\n    }\n  });\n};\n_c3 = GetAllPages;\nexport const GetField = (field, data, pages, setPages) => {};\n_c4 = GetField;\n\nconst SubPage = ({\n  page,\n  id,\n  pages,\n  setPages\n}) => {\n  const data = GetDataById(page.key, id); // console.log(\"rendering subpage\");\n\n  GetAllPages(page, data, pages, setPages);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    active: id,\n    page: page\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 10\n  }, this);\n}; // export default SubTable;\n\n\n_c5 = SubPage;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"SubTableLogic\");\n$RefreshReg$(_c2, \"SubTable\");\n$RefreshReg$(_c3, \"GetAllPages\");\n$RefreshReg$(_c4, \"GetField\");\n$RefreshReg$(_c5, \"SubPage\");","map":{"version":3,"sources":["/home/djole/Documents/fullstack/sluzba/frontend/src/components/Table/SubTable.js"],"names":["GetDataById","FindParent","Form","GetDefaultData","useEffect","useState","SubTableLogic","page","id","pages","setPages","SubTable","map","key","GetAllPages","data","fields","forEach","field","options","parent","console","log","find","parentMore","oldPages","GetField","SubPage"],"mappings":"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","sourcesContent":["import { GetDataById } from \"../../helpers/GetStates\";\nimport FindParent from \"../../helpers/FindParent\";\nimport Form from \"../Form/Form\";\nimport { GetDefaultData } from \"../../helpers/GetDefaultData\";\nimport { useEffect, useState } from \"react\";\n\n// export const SubTableLogic = ({ page, id }) => {\n//   const [pages, setPages] = useState([{ page: page, id: id }]);\n//   return <SubTable pages={pages} setPages={setPages} />;\n// };\n\n// const SubPageLogic = (page, id, data, pages, setPages) => {\n//   // const data = GetDataById(page.key, id);\n//   return SubFieldsLogic(data, page, pages, setPages);\n// };\n\n// const SubFieldsLogic = (data, page, pages, setPages) => {\n//   // console.log(pages);\n//   page.fields.forEach((field) => {\n//     if (field.options) {\n//       const parent = FindParent(field);\n//       const parentMore = { page: parent, id: data[field.key] };\n//       // console.log(data[field.key]);\n//       // console.log(id);\n//       // pages.push(parentMore);\n//       if (!pages.find((p) => p.page.key === parent.key)) {\n//         setPages((oldPages) => [...oldPages, parentMore]);\n//       }\n//       //  else {\n//       // if(data[field.key])\n//       // setPages(oldPages => [...oldPages])\n//       // }\n//       // if (data[field.key] !== 0) {\n//       // SubPageLogic(parent, data[field.key], pages, setPages);\n//       // }\n//     }\n//   });\n// };\n\n// const SubTable = ({ pages, setPages }) => {\n//   // console.log(pages);\n//   return pages.map((page) => {\n//     return (\n//       <SubPage\n//         key={page.page.key}\n//         id={page.id}\n//         page={page.page}\n//         pages={pages}\n//         setPages={setPages}\n//       />\n//     );\n//   });\n// };\n\n// const SubPage = ({ page, id, pages, setPages }) => {\n//   const data = GetDataById(page.key, id);\n//   const defaultData = GetDefaultData(page);\n\n//   const [fullData, setFullData] = useState(data ? data : defaultData);\n//   // useEffect(() => {\n//   //   if (data) {\n//   //     setFullData(data);\n//   //   } else {\n//   //     setFullData(defaultData);\n//   //   }\n//   // }, [data]);\n//   // console.log(data);data ? data : defaultData,\n//   // console.log(defaultData);\n//   // const [data, setData] =\n\n//   SubPageLogic(page, id, fullData, pages, setPages);\n//   return (\n//     // {/* <div className=\"head\">{page.name}</div> */}\n//     <Form active={id} defaultData={data ? data : defaultData} page={page} />\n//     // {/* <SubFields data={data} page={page} /> */}\n//   );\n// };\n\nexport const SubTableLogic = ({ page, id }) => {\n  const [pages, setPages] = useState([{ page: page, id: id }]);\n  // console.log(\"rendering logic\");\n  return <SubTable pages={pages} setPages={setPages} />;\n};\n\nexport const SubTable = ({ pages, setPages }) => {\n  return pages.map((page) => {\n    return (\n      <SubPage\n        key={page.page.key}\n        page={page.page}\n        id={page.id}\n        pages={pages}\n        setPages={setPages}\n      />\n    );\n  });\n};\n\nexport const GetAllPages = (page, data, pages, setPages) => {\n  page.fields.forEach((field) => {\n    if (field.options) {\n      const parent = FindParent(field);\n      console.log(parent.key);\n      if (!pages.find((page) => page.page.key === parent.key)) {\n        const parentMore = { page: parent, id: data[field.key] };\n        setPages((oldPages) => [...oldPages, parentMore]);\n      }\n    }\n  });\n};\n\nexport const GetField = (field, data, pages, setPages) => {};\n\nconst SubPage = ({ page, id, pages, setPages }) => {\n  const data = GetDataById(page.key, id);\n  // console.log(\"rendering subpage\");\n\n  GetAllPages(page, data, pages, setPages);\n\n  return <Form active={id} page={page} />;\n};\n\n// export default SubTable;\n"]},"metadata":{},"sourceType":"module"}