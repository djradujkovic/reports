{"ast":null,"code":"var _jsxFileName = \"/home/djole/Documents/fullstack/sluzba/frontend/src/components/Select/Select.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport \"./Select.style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Select = ({\n  id,\n  options\n}) => {\n  _s();\n\n  const [isOpen, setIsOpen] = useState(false);\n  const [displayOptions, setDisplayOptions] = useState(options);\n  const [search, setSearch] = useState(\"\");\n  useEffect(() => {\n    console.log(search);\n    setDisplayOptions(options.filter(option => {\n      if (option.name) {\n        return option.name.toLocaleLowerCase().search(search.toLocaleLowerCase()) !== -1;\n      }\n\n      return options;\n    }));\n  }, [search, options]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"select\",\n    id: id,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      onFocus: () => setIsOpen(true),\n      onBlur: () => setIsOpen(false),\n      onChange: e => setSearch(e.target.value),\n      value: search\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: displayOptions.map(option => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: option.name\n        }, option.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 20\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Select, \"mPkrMHUgPjx8GVSezvtOnAfAda0=\");\n\n_c = Select;\nexport default Select;\n\nvar _c;\n\n$RefreshReg$(_c, \"Select\");","map":{"version":3,"sources":["/home/djole/Documents/fullstack/sluzba/frontend/src/components/Select/Select.js"],"names":["useEffect","useState","Select","id","options","isOpen","setIsOpen","displayOptions","setDisplayOptions","search","setSearch","console","log","filter","option","name","toLocaleLowerCase","e","target","value","map"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAO,oBAAP;;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,EAAF;AAAMC,EAAAA;AAAN,CAAD,KAAqB;AAAA;;AAClC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACM,cAAD,EAAiBC,iBAAjB,IAAsCP,QAAQ,CAACG,OAAD,CAApD;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,EAAD,CAApC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACAD,IAAAA,iBAAiB,CACfJ,OAAO,CAACS,MAAR,CAAgBC,MAAD,IAAY;AACzB,UAAIA,MAAM,CAACC,IAAX,EAAiB;AACf,eACED,MAAM,CAACC,IAAP,CACGC,iBADH,GAEGP,MAFH,CAEUA,MAAM,CAACO,iBAAP,EAFV,MAE0C,CAAC,CAH7C;AAKD;;AACD,aAAOZ,OAAP;AACD,KATD,CADe,CAAjB;AAYD,GAdQ,EAcN,CAACK,MAAD,EAASL,OAAT,CAdM,CAAT;AAgBA,sBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAwB,IAAA,EAAE,EAAED,EAA5B;AAAA,4BACE;AACE,MAAA,OAAO,EAAE,MAAMG,SAAS,CAAC,IAAD,CAD1B;AAEE,MAAA,MAAM,EAAE,MAAMA,SAAS,CAAC,KAAD,CAFzB;AAGE,MAAA,QAAQ,EAAGW,CAAD,IAAOP,SAAS,CAACO,CAAC,CAACC,MAAF,CAASC,KAAV,CAH5B;AAIE,MAAA,KAAK,EAAEV;AAJT;AAAA;AAAA;AAAA;AAAA,YADF,EAOGJ,MAAM,iBACL;AAAA,gBACGE,cAAc,CAACa,GAAf,CAAoBN,MAAD,IAAY;AAC9B,4BAAO;AAAA,oBAAsBA,MAAM,CAACC;AAA7B,WAAUD,MAAM,CAACX,EAAjB;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD,OAFA;AADH;AAAA;AAAA;AAAA;AAAA,YARJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CAtCD;;GAAMD,M;;KAAAA,M;AAwCN,eAAeA,MAAf","sourcesContent":["import { useEffect, useState } from \"react\";\n\nimport \"./Select.style.css\";\n\nconst Select = ({ id, options }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [displayOptions, setDisplayOptions] = useState(options);\n  const [search, setSearch] = useState(\"\");\n\n  useEffect(() => {\n    console.log(search);\n    setDisplayOptions(\n      options.filter((option) => {\n        if (option.name) {\n          return (\n            option.name\n              .toLocaleLowerCase()\n              .search(search.toLocaleLowerCase()) !== -1\n          );\n        }\n        return options;\n      })\n    );\n  }, [search, options]);\n\n  return (\n    <div className=\"select\" id={id}>\n      <input\n        onFocus={() => setIsOpen(true)}\n        onBlur={() => setIsOpen(false)}\n        onChange={(e) => setSearch(e.target.value)}\n        value={search}\n      ></input>\n      {isOpen && (\n        <div>\n          {displayOptions.map((option) => {\n            return <div key={option.id}>{option.name}</div>;\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Select;\n"]},"metadata":{},"sourceType":"module"}