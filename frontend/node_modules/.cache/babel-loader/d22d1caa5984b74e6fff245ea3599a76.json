{"ast":null,"code":"var _jsxFileName = \"/home/djole/Documents/fullstack/sluzba/frontend/src/components/Table/TableRow.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState } from \"react\";\nimport FindParent from \"../../helpers/FindParent\";\nimport { GetDataById } from \"../../helpers/GetStates\";\nimport { SubTableLogic } from \"./SubTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TableFields = ({\n  page,\n  id\n}) => {\n  const data = GetDataById(page.key, id);\n  return page.fields.map(field => {\n    return /*#__PURE__*/_jsxDEV(TableField, {\n      field: field,\n      data: data\n    }, field.key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 12\n    }, this);\n  });\n};\n\n_c = TableFields;\n\nconst TableField = ({\n  field,\n  data\n}) => {\n  if (!field.table && !field.options) return null;\n  const parent = FindParent(field);\n\n  if (parent) {\n    const page = GetDataById(parent.key, data && data[field.key]);\n\n    if (page) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: page.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableFields, {\n          page: parent,\n          id: page.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    }\n  }\n\n  if (!data) {\n    return /*#__PURE__*/_jsxDEV(\"h5\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"h5\", {\n    children: [data && data[field.key], field.key === \"price\" && \"KM\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = TableField;\n\nconst TableRow = ({\n  data,\n  length,\n  page\n}) => {\n  _s();\n\n  const [isOpen, setIsOpen] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"table-row\",\n    onClick: () => setIsOpen(oldOpen => !oldOpen),\n    style: {\n      gridTemplateColumns: `repeat(${length}, 1fr)`\n    },\n    children: [/*#__PURE__*/_jsxDEV(TableFields, {\n      page: page,\n      id: data && data.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(SubTableLogic, {\n        page: page,\n        id: data && data.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TableRow, \"+sus0Lb0ewKHdwiUhiTAJFoFyQ0=\");\n\n_c3 = TableRow;\nexport default TableRow;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"TableFields\");\n$RefreshReg$(_c2, \"TableField\");\n$RefreshReg$(_c3, \"TableRow\");","map":{"version":3,"sources":["/home/djole/Documents/fullstack/sluzba/frontend/src/components/Table/TableRow.js"],"names":["React","useState","FindParent","GetDataById","SubTableLogic","TableFields","page","id","data","key","fields","map","field","TableField","table","options","parent","name","TableRow","length","isOpen","setIsOpen","oldOpen","gridTemplateColumns"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,aAAT,QAA8B,YAA9B;;;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAkB;AACpC,QAAMC,IAAI,GAAGL,WAAW,CAACG,IAAI,CAACG,GAAN,EAAWF,EAAX,CAAxB;AACA,SAAOD,IAAI,CAACI,MAAL,CAAYC,GAAZ,CAAiBC,KAAD,IAAW;AAChC,wBAAO,QAAC,UAAD;AAA4B,MAAA,KAAK,EAAEA,KAAnC;AAA0C,MAAA,IAAI,EAAEJ;AAAhD,OAAiBI,KAAK,CAACH,GAAvB;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFM,CAAP;AAGD,CALD;;KAAMJ,W;;AAON,MAAMQ,UAAU,GAAG,CAAC;AAAED,EAAAA,KAAF;AAASJ,EAAAA;AAAT,CAAD,KAAqB;AACtC,MAAI,CAACI,KAAK,CAACE,KAAP,IAAgB,CAACF,KAAK,CAACG,OAA3B,EAAoC,OAAO,IAAP;AACpC,QAAMC,MAAM,GAAGd,UAAU,CAACU,KAAD,CAAzB;;AACA,MAAII,MAAJ,EAAY;AACV,UAAMV,IAAI,GAAGH,WAAW,CAACa,MAAM,CAACP,GAAR,EAAaD,IAAI,IAAIA,IAAI,CAACI,KAAK,CAACH,GAAP,CAAzB,CAAxB;;AACA,QAAIH,IAAJ,EAAU;AACR,0BACE;AAAA,gCACE;AAAA,oBAAKA,IAAI,CAACW;AAAV;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,WAAD;AAAa,UAAA,IAAI,EAAED,MAAnB;AAA2B,UAAA,EAAE,EAAEV,IAAI,CAACC;AAApC;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA,sBADF;AAMD;AACF;;AACD,MAAI,CAACC,IAAL,EAAW;AACT,wBAAO;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,sBACE;AAAA,eACGA,IAAI,IAAIA,IAAI,CAACI,KAAK,CAACH,GAAP,CADf,EAEGG,KAAK,CAACH,GAAN,KAAc,OAAd,IAAyB,IAF5B;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAvBD;;MAAMI,U;;AAyBN,MAAMK,QAAQ,GAAG,CAAC;AAAEV,EAAAA,IAAF;AAAQW,EAAAA,MAAR;AAAgBb,EAAAA;AAAhB,CAAD,KAA4B;AAAA;;AAC3C,QAAM,CAACc,MAAD,EAASC,SAAT,IAAsBpB,QAAQ,CAAC,KAAD,CAApC;AACA,sBACE;AACE,IAAA,SAAS,EAAC,WADZ;AAEE,IAAA,OAAO,EAAE,MAAMoB,SAAS,CAAEC,OAAD,IAAa,CAACA,OAAf,CAF1B;AAGE,IAAA,KAAK,EAAE;AAAEC,MAAAA,mBAAmB,EAAG,UAASJ,MAAO;AAAxC,KAHT;AAAA,4BAKE,QAAC,WAAD;AAAa,MAAA,IAAI,EAAEb,IAAnB;AAAyB,MAAA,EAAE,EAAEE,IAAI,IAAIA,IAAI,CAACD;AAA1C;AAAA;AAAA;AAAA;AAAA,YALF,EAMGa,MAAM,iBACL;AAAA,6BACE,QAAC,aAAD;AAAe,QAAA,IAAI,EAAEd,IAArB;AAA2B,QAAA,EAAE,EAAEE,IAAI,IAAIA,IAAI,CAACD;AAA5C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAhBD;;GAAMW,Q;;MAAAA,Q;AAkBN,eAAeA,QAAf","sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nimport FindParent from \"../../helpers/FindParent\";\nimport { GetDataById } from \"../../helpers/GetStates\";\nimport { SubTableLogic } from \"./SubTable\";\n\nconst TableFields = ({ page, id }) => {\n  const data = GetDataById(page.key, id);\n  return page.fields.map((field) => {\n    return <TableField key={field.key} field={field} data={data} />;\n  });\n};\n\nconst TableField = ({ field, data }) => {\n  if (!field.table && !field.options) return null;\n  const parent = FindParent(field);\n  if (parent) {\n    const page = GetDataById(parent.key, data && data[field.key]);\n    if (page) {\n      return (\n        <>\n          <h5>{page.name}</h5>\n          <TableFields page={parent} id={page.id} />\n        </>\n      );\n    }\n  }\n  if (!data) {\n    return <h5></h5>;\n  }\n  return (\n    <h5>\n      {data && data[field.key]}\n      {field.key === \"price\" && \"KM\"}\n    </h5>\n  );\n};\n\nconst TableRow = ({ data, length, page }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <div\n      className=\"table-row\"\n      onClick={() => setIsOpen((oldOpen) => !oldOpen)}\n      style={{ gridTemplateColumns: `repeat(${length}, 1fr)` }}\n    >\n      <TableFields page={page} id={data && data.id} />\n      {isOpen && (\n        <div>\n          <SubTableLogic page={page} id={data && data.id} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TableRow;\n"]},"metadata":{},"sourceType":"module"}