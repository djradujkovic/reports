{"ast":null,"code":"var _jsxFileName = \"/home/djole/Documents/fullstack/sluzba/frontend/src/components/Select/Select.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { GetData, GetDataById } from \"../../helpers/GetStates\";\nimport \"./Select.style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SelectInput = ({\n  setDisplayOptions,\n  options,\n  value,\n  setIsOpen\n}) => {\n  _s();\n\n  const selected = GetDataById(field.options, value);\n  console.log(selected);\n  const [search, setSearch] = useState(value ? selected.name : \"\");\n  useEffect(() => {\n    setDisplayOptions(options.filter(option => {\n      if (option.name) {\n        return option.name.toLocaleLowerCase().search(search.toLocaleLowerCase()) !== -1;\n      }\n\n      return options;\n    }));\n  }, [search, options]);\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    onClick: () => setIsOpen(oldOpen => !oldOpen) // onFocus={() => setIsOpen(true)}\n    // onBlur={() => setIsOpen(false)}\n    ,\n    onChange: e => setSearch(e.target.value),\n    value: search\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SelectInput, \"QRtbKv3StH8j4tBiYNHwf/ITLRI=\");\n\n_c = SelectInput;\n\nconst Select = ({\n  id,\n  field,\n  value,\n  setData\n}) => {\n  _s2();\n\n  const options = GetData(field.options);\n  const [isOpen, setIsOpen] = useState(false);\n  const [displayOptions, setDisplayOptions] = useState(options);\n  useEffect(() => {//     if (value) {\n    //       setSearch(options.find((option) => option.id === value).name);\n    //     } else {\n    //       setSearch(\"\");\n    //     }\n  }, []);\n\n  const handleSelect = (e, option) => {\n    e.preventDefault(); //     setSearch(option.name);\n\n    setData(oldData => ({ ...oldData,\n      [field.key]: option.id\n    }));\n    setIsOpen(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"select\",\n    id: id,\n    children: [/*#__PURE__*/_jsxDEV(SelectInput, {\n      setDisplayOptions: setDisplayOptions,\n      value: value,\n      options: options,\n      setIsOpen: setIsOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: displayOptions.map(option => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: e => handleSelect(e, option),\n          children: option.name\n        }, option.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Select, \"1KYfgYZgAQZd7j1gqQ27N2kqllY=\");\n\n_c2 = Select;\nexport default Select;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SelectInput\");\n$RefreshReg$(_c2, \"Select\");","map":{"version":3,"sources":["/home/djole/Documents/fullstack/sluzba/frontend/src/components/Select/Select.js"],"names":["useEffect","useState","GetData","GetDataById","SelectInput","setDisplayOptions","options","value","setIsOpen","selected","field","console","log","search","setSearch","name","filter","option","toLocaleLowerCase","oldOpen","e","target","Select","id","setData","isOpen","displayOptions","handleSelect","preventDefault","oldData","key","map"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { GetData, GetDataById } from \"../../helpers/GetStates\";\n\nimport \"./Select.style.css\";\n\nconst SelectInput = ({ setDisplayOptions, options, value, setIsOpen }) => {\n  const selected = GetDataById(field.options, value);\n  console.log(selected);\n  const [search, setSearch] = useState(value ? selected.name : \"\");\n  useEffect(() => {\n    setDisplayOptions(\n      options.filter((option) => {\n        if (option.name) {\n          return (\n            option.name\n              .toLocaleLowerCase()\n              .search(search.toLocaleLowerCase()) !== -1\n          );\n        }\n        return options;\n      })\n    );\n  }, [search, options]);\n  return (\n    <input\n      onClick={() => setIsOpen((oldOpen) => !oldOpen)}\n      // onFocus={() => setIsOpen(true)}\n      // onBlur={() => setIsOpen(false)}\n      onChange={(e) => setSearch(e.target.value)}\n      value={search}\n    ></input>\n  );\n};\n\nconst Select = ({ id, field, value, setData }) => {\n  const options = GetData(field.options);\n  const [isOpen, setIsOpen] = useState(false);\n  const [displayOptions, setDisplayOptions] = useState(options);\n\n  useEffect(() => {\n    //     if (value) {\n    //       setSearch(options.find((option) => option.id === value).name);\n    //     } else {\n    //       setSearch(\"\");\n    //     }\n  }, []);\n\n  const handleSelect = (e, option) => {\n    e.preventDefault();\n    //     setSearch(option.name);\n    setData((oldData) => ({ ...oldData, [field.key]: option.id }));\n    setIsOpen(false);\n  };\n\n  return (\n    <div className=\"select\" id={id}>\n      <SelectInput\n        setDisplayOptions={setDisplayOptions}\n        value={value}\n        options={options}\n        setIsOpen={setIsOpen}\n      />\n      {isOpen && (\n        <div>\n          {displayOptions.map((option) => {\n            return (\n              <div key={option.id} onClick={(e) => handleSelect(e, option)}>\n                {option.name}\n              </div>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Select;\n"]},"metadata":{},"sourceType":"module"}