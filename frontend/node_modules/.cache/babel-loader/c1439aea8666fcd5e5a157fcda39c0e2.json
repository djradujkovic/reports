{"ast":null,"code":"var _jsxFileName = \"/home/djole/Documents/fullstack/sluzba/frontend/src/components/Table/SubTable.js\",\n    _s = $RefreshSig$();\n\nimport { GetDataById } from \"../../helpers/GetStates\";\nimport FindParent from \"../../helpers/FindParent\";\nimport Form from \"../Form/Form\";\nimport { GetDefaultData } from \"../../helpers/GetDefaultData\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SubTableLogic = ({\n  page,\n  id\n}) => {\n  _s();\n\n  const [pages, setPages] = useState([{\n    page: page,\n    id: id\n  }]);\n  return /*#__PURE__*/_jsxDEV(SubTable, {\n    pages: pages,\n    setPages: setPages\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 10\n  }, this);\n};\n\n_s(SubTableLogic, \"uhKOBOABF25lySCX2thHyF7mkKk=\");\n\n_c = SubTableLogic;\n\nconst SubPageLogic = (page, id, pages, setPages) => {\n  const data = GetDataById(page.key, id);\n  return SubFieldsLogic(data, page, pages, setPages);\n};\n\n_c2 = SubPageLogic;\n\nconst SubFieldsLogic = (data, page, pages, setPages) => {\n  console.log(pages);\n  page.fields.forEach(field => {\n    if (field.options) {\n      const parent = FindParent(field);\n      const parentMore = {\n        page: parent,\n        id: data[field.key]\n      }; // pages.push(parentMore);\n\n      if (!pages.includes(parentMore)) {\n        setPages(oldPages => [...oldPages, parentMore]);\n      } // if (data[field.key] !== 0) {\n      // SubPageLogic(parent, data[field.key], pages, setPages);\n      // }\n\n    }\n  });\n};\n\n_c3 = SubFieldsLogic;\n\nconst SubTable = ({\n  pages,\n  setPages\n}) => {\n  console.log(pages);\n  return pages.map(page => {\n    SubPageLogic(page.page, page.id, pages, setPages);\n    return /*#__PURE__*/_jsxDEV(SubPage, {\n      id: page.id,\n      page: page.page\n    }, page.page.key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 12\n    }, this);\n  });\n};\n\n_c4 = SubTable;\n\nconst SubPage = ({\n  page,\n  id\n}) => {\n  const data = GetDataById(page.key, id);\n  const defaultData = GetDefaultData(page);\n  console.log(data);\n  console.log(defaultData); // const [data, setData] =\n\n  return (\n    /*#__PURE__*/\n    // {/* <div className=\"head\">{page.name}</div> */}\n    _jsxDEV(Form, {\n      active: id,\n      defaultData: data ? data : defaultData,\n      page: page\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }, this) // {/* <SubFields data={data} page={page} /> */}\n\n  );\n}; // const SubTableLogic = ({page, id}) => {\n//   const [pages, setPages] = useState([])\n//   const pageData = {page: page, id: id}\n//   return <SubPageLogic pageData={pageData} pages={pages} />\n// }\n// const SubPageLogic = ({pageData}) => {\n//   const data = GetDataById(pageData.page.key, pageData.id)\n//   return pages.map(page => {\n//   })\n// }\n// const SubFields = ({ data, page }) => {\n//   return page.fields.map((field) => {\n//     return <SubField key={field.key} field={field} data={data} />;\n//   });\n// };\n// const SubField = ({ field, data }) => {\n//   const parent = FindParent(field);\n//   if (parent) {\n//     const page = GetDataById(parent.key, data[field.key]);\n//     if (page) {\n//       return (\n//         <p>\n//           {field.name}: {page.name}\n//         </p>\n//       );\n//     }\n//   }\n//   if (field.name) {\n//     return (\n//       <p>\n//         {field.name}: {data[field.key]}\n//         {field.key === \"price\" && \"KM\"}\n//       </p>\n//     );\n//   }\n//   return null;\n// };\n\n\n_c5 = SubPage;\nexport default SubTable;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"SubTableLogic\");\n$RefreshReg$(_c2, \"SubPageLogic\");\n$RefreshReg$(_c3, \"SubFieldsLogic\");\n$RefreshReg$(_c4, \"SubTable\");\n$RefreshReg$(_c5, \"SubPage\");","map":{"version":3,"sources":["/home/djole/Documents/fullstack/sluzba/frontend/src/components/Table/SubTable.js"],"names":["GetDataById","FindParent","Form","GetDefaultData","useState","SubTableLogic","page","id","pages","setPages","SubPageLogic","data","key","SubFieldsLogic","console","log","fields","forEach","field","options","parent","parentMore","includes","oldPages","SubTable","map","SubPage","defaultData"],"mappings":"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","sourcesContent":["import { GetDataById } from \"../../helpers/GetStates\";\nimport FindParent from \"../../helpers/FindParent\";\nimport Form from \"../Form/Form\";\nimport { GetDefaultData } from \"../../helpers/GetDefaultData\";\nimport { useState } from \"react\";\n\nexport const SubTableLogic = ({ page, id }) => {\n  const [pages, setPages] = useState([{ page: page, id: id }]);\n  return <SubTable pages={pages} setPages={setPages} />;\n};\n\nconst SubPageLogic = (page, id, pages, setPages) => {\n  const data = GetDataById(page.key, id);\n  return SubFieldsLogic(data, page, pages, setPages);\n};\n\nconst SubFieldsLogic = (data, page, pages, setPages) => {\n  console.log(pages);\n  page.fields.forEach((field) => {\n    if (field.options) {\n      const parent = FindParent(field);\n      const parentMore = { page: parent, id: data[field.key] };\n      // pages.push(parentMore);\n      if (!pages.includes(parentMore)) {\n        setPages((oldPages) => [...oldPages, parentMore]);\n      }\n      // if (data[field.key] !== 0) {\n      // SubPageLogic(parent, data[field.key], pages, setPages);\n      // }\n    }\n  });\n};\n\nconst SubTable = ({ pages, setPages }) => {\n  console.log(pages);\n  return pages.map((page) => {\n    SubPageLogic(page.page, page.id, pages, setPages);\n    return <SubPage key={page.page.key} id={page.id} page={page.page} />;\n  });\n};\n\nconst SubPage = ({ page, id }) => {\n  const data = GetDataById(page.key, id);\n  const defaultData = GetDefaultData(page);\n  console.log(data);\n  console.log(defaultData);\n  // const [data, setData] =\n  return (\n    // {/* <div className=\"head\">{page.name}</div> */}\n    <Form active={id} defaultData={data ? data : defaultData} page={page} />\n    // {/* <SubFields data={data} page={page} /> */}\n  );\n};\n\n// const SubTableLogic = ({page, id}) => {\n//   const [pages, setPages] = useState([])\n//   const pageData = {page: page, id: id}\n//   return <SubPageLogic pageData={pageData} pages={pages} />\n// }\n\n// const SubPageLogic = ({pageData}) => {\n//   const data = GetDataById(pageData.page.key, pageData.id)\n//   return pages.map(page => {\n\n//   })\n\n// }\n\n// const SubFields = ({ data, page }) => {\n//   return page.fields.map((field) => {\n//     return <SubField key={field.key} field={field} data={data} />;\n//   });\n// };\n\n// const SubField = ({ field, data }) => {\n//   const parent = FindParent(field);\n//   if (parent) {\n//     const page = GetDataById(parent.key, data[field.key]);\n//     if (page) {\n//       return (\n//         <p>\n//           {field.name}: {page.name}\n//         </p>\n//       );\n//     }\n//   }\n//   if (field.name) {\n//     return (\n//       <p>\n//         {field.name}: {data[field.key]}\n//         {field.key === \"price\" && \"KM\"}\n//       </p>\n//     );\n//   }\n//   return null;\n// };\n\nexport default SubTable;\n"]},"metadata":{},"sourceType":"module"}