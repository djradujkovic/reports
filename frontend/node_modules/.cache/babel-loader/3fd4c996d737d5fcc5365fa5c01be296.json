{"ast":null,"code":"var _jsxFileName = \"/home/djole/Documents/fullstack/sluzba/frontend/src/components/Form/Field.js\";\n// import { GetData } from \"../../helpers/GetStates\";\nimport Select from \"../Select/Select\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst JustField = ({\n  field,\n  data,\n  setData,\n  editable\n}) => {\n  // const user = GetUser();\n  // const editable = user.group.pages.includes(page.key);\n  const style = {\n    border: !editable && \"none\",\n    cursor: \"default\"\n  };\n\n  const handleChange = e => {\n    let value = 0;\n\n    switch (typeof data[e.target.name]) {\n      case \"string\":\n        value = e.target.value;\n        break;\n\n      case \"number\":\n        if (e.target.value) value = parseInt(e.target.value);\n        break;\n\n      case \"boolean\":\n        value = !data[e.target.name];\n        break;\n\n      default:\n        value = e.target.value;\n    }\n\n    setData(oldData => ({ ...oldData,\n      [e.target.name]: value\n    }));\n  };\n\n  switch (field.type) {\n    case \"select\":\n      return /*#__PURE__*/_jsxDEV(Select, {\n        id: field.key,\n        field: field,\n        value: data[field.key],\n        setData: setData,\n        editable: editable\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this) // <select\n      //   id={field.key}\n      //   name={field.key}\n      //   value={data[field.key]}\n      //   onChange={(e) => handleChange(e)}\n      //   disabled={!editable}\n      //   style={{ ...style, WebkitAppearance: !editable && \"none\" }}\n      // >\n      //   <option value={0}>{field.label}..</option>\n      //   {options.map((option) => {\n      //     return (\n      //       <option key={option.id} value={option.id}>\n      //         {option.name}\n      //       </option>\n      //     );\n      //   })}\n      // </select>\n      ;\n\n    default:\n      return /*#__PURE__*/_jsxDEV(\"input\", {\n        value: typeof data[field.key] == \"object\" ? data[field.key].value : data[field.key],\n        name: field.key,\n        id: field.key,\n        type: field.type,\n        onChange: e => handleChange(e),\n        required: field.required,\n        style: { ...style,\n          MozAppearance: !editable && \"textfield\"\n        },\n        disabled: !editable\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this);\n  }\n};\n\n_c = JustField;\n\nconst Field = ({\n  field,\n  data,\n  setData,\n  editable\n}) => {\n  if (field.name === \"\") return null;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: field.key,\n      children: [field.name, \":\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(JustField, {\n      field: field,\n      data: data,\n      setData: setData,\n      editable: editable\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_c2 = Field;\nexport default Field;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"JustField\");\n$RefreshReg$(_c2, \"Field\");","map":{"version":3,"sources":["/home/djole/Documents/fullstack/sluzba/frontend/src/components/Form/Field.js"],"names":["Select","JustField","field","data","setData","editable","style","border","cursor","handleChange","e","value","target","name","parseInt","oldData","type","key","required","MozAppearance","Field"],"mappings":"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","sourcesContent":["// import { GetData } from \"../../helpers/GetStates\";\nimport Select from \"../Select/Select\";\n\nconst JustField = ({ field, data, setData, editable }) => {\n  // const user = GetUser();\n  // const editable = user.group.pages.includes(page.key);\n  const style = {\n    border: !editable && \"none\",\n    cursor: \"default\",\n  };\n  const handleChange = (e) => {\n    let value = 0;\n    switch (typeof data[e.target.name]) {\n      case \"string\":\n        value = e.target.value;\n        break;\n      case \"number\":\n        if (e.target.value) value = parseInt(e.target.value);\n        break;\n      case \"boolean\":\n        value = !data[e.target.name];\n        break;\n      default:\n        value = e.target.value;\n    }\n    setData((oldData) => ({ ...oldData, [e.target.name]: value }));\n  };\n  switch (field.type) {\n    case \"select\":\n      return (\n        <Select\n          id={field.key}\n          field={field}\n          value={data[field.key]}\n          setData={setData}\n          editable={editable}\n        />\n        // <select\n        //   id={field.key}\n        //   name={field.key}\n        //   value={data[field.key]}\n        //   onChange={(e) => handleChange(e)}\n        //   disabled={!editable}\n        //   style={{ ...style, WebkitAppearance: !editable && \"none\" }}\n        // >\n        //   <option value={0}>{field.label}..</option>\n        //   {options.map((option) => {\n        //     return (\n        //       <option key={option.id} value={option.id}>\n        //         {option.name}\n        //       </option>\n        //     );\n        //   })}\n        // </select>\n      );\n    default:\n      return (\n        <input\n          value={\n            typeof data[field.key] == \"object\"\n              ? data[field.key].value\n              : data[field.key]\n          }\n          name={field.key}\n          id={field.key}\n          type={field.type}\n          onChange={(e) => handleChange(e)}\n          required={field.required}\n          style={{ ...style, MozAppearance: !editable && \"textfield\" }}\n          disabled={!editable}\n        />\n      );\n  }\n};\n\nconst Field = ({ field, data, setData, editable }) => {\n  if (field.name === \"\") return null;\n  return (\n    <>\n      <label htmlFor={field.key}>{field.name}:</label>\n      <JustField\n        field={field}\n        data={data}\n        setData={setData}\n        editable={editable}\n      />\n    </>\n  );\n};\n\nexport default Field;\n"]},"metadata":{},"sourceType":"module"}