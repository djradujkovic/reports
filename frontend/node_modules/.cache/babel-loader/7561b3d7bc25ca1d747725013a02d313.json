{"ast":null,"code":"import { ADD, DELETE, GET, UPDATE } from \"../types\";\nconst initialState = {\n  users: [],\n  cities: [],\n  projects: [],\n  positions: [],\n  reports: []\n};\nexport default function data(state = initialState, action) {\n  switch (action.type) {\n    case GET:\n      return { ...state,\n        [action.page]: action.payload\n      };\n\n    case ADD:\n      return { ...state,\n        [action.page]: [...state[action.page], action.payload]\n      };\n\n    case UPDATE:\n      state[action.page] = state[action.page].map(user => {\n        if (user.id === action.payload.id) {\n          user = action.payload;\n        }\n\n        return user;\n      });\n      return { ...state,\n        [action.page]: state[action.page]\n      };\n\n    case DELETE:\n      return { ...state,\n        [action.page]: state[action.page].filter(user => user.id !== action.payload)\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/djole/Documents/fullstack/sluzba/frontend/src/redux/reducers/data.js"],"names":["ADD","DELETE","GET","UPDATE","initialState","users","cities","projects","positions","reports","data","state","action","type","page","payload","map","user","id","filter"],"mappings":"AAAA,SAASA,GAAT,EAAcC,MAAd,EAAsBC,GAAtB,EAA2BC,MAA3B,QAAyC,UAAzC;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,MAAM,EAAE,EAFW;AAGnBC,EAAAA,QAAQ,EAAE,EAHS;AAInBC,EAAAA,SAAS,EAAE,EAJQ;AAKnBC,EAAAA,OAAO,EAAE;AALU,CAArB;AAQA,eAAe,SAASC,IAAT,CAAcC,KAAK,GAAGP,YAAtB,EAAoCQ,MAApC,EAA4C;AACzD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,GAAL;AACE,aAAO,EACL,GAAGS,KADE;AAEL,SAACC,MAAM,CAACE,IAAR,GAAeF,MAAM,CAACG;AAFjB,OAAP;;AAIF,SAAKf,GAAL;AACE,aAAO,EACL,GAAGW,KADE;AAEL,SAACC,MAAM,CAACE,IAAR,GAAe,CAAC,GAAGH,KAAK,CAACC,MAAM,CAACE,IAAR,CAAT,EAAwBF,MAAM,CAACG,OAA/B;AAFV,OAAP;;AAIF,SAAKZ,MAAL;AACEQ,MAAAA,KAAK,CAACC,MAAM,CAACE,IAAR,CAAL,GAAqBH,KAAK,CAACC,MAAM,CAACE,IAAR,CAAL,CAAmBE,GAAnB,CAAwBC,IAAD,IAAU;AACpD,YAAIA,IAAI,CAACC,EAAL,KAAYN,MAAM,CAACG,OAAP,CAAeG,EAA/B,EAAmC;AACjCD,UAAAA,IAAI,GAAGL,MAAM,CAACG,OAAd;AACD;;AACD,eAAOE,IAAP;AACD,OALoB,CAArB;AAMA,aAAO,EACL,GAAGN,KADE;AAEL,SAACC,MAAM,CAACE,IAAR,GAAeH,KAAK,CAACC,MAAM,CAACE,IAAR;AAFf,OAAP;;AAIF,SAAKb,MAAL;AACE,aAAO,EACL,GAAGU,KADE;AAEL,SAACC,MAAM,CAACE,IAAR,GAAeH,KAAK,CAACC,MAAM,CAACE,IAAR,CAAL,CAAmBK,MAAnB,CACZF,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYN,MAAM,CAACG,OADhB;AAFV,OAAP;;AAMF;AACE,aAAOJ,KAAP;AA9BJ;AAgCD","sourcesContent":["import { ADD, DELETE, GET, UPDATE } from \"../types\";\n\nconst initialState = {\n  users: [],\n  cities: [],\n  projects: [],\n  positions: [],\n  reports: [],\n};\n\nexport default function data(state = initialState, action) {\n  switch (action.type) {\n    case GET:\n      return {\n        ...state,\n        [action.page]: action.payload,\n      };\n    case ADD:\n      return {\n        ...state,\n        [action.page]: [...state[action.page], action.payload],\n      };\n    case UPDATE:\n      state[action.page] = state[action.page].map((user) => {\n        if (user.id === action.payload.id) {\n          user = action.payload;\n        }\n        return user;\n      });\n      return {\n        ...state,\n        [action.page]: state[action.page],\n      };\n    case DELETE:\n      return {\n        ...state,\n        [action.page]: state[action.page].filter(\n          (user) => user.id !== action.payload\n        ),\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}